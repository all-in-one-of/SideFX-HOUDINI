float round(float number; int decimals) {
    return ((number * pow(10, decimals)) / pow(10, decimals));
}


// This function will take the original path as the base, amnd from this
// line the function will create the polyline with the points passed by parameters
// The function will ignore the points that will be equal to the original
// primitive.
int create_prim(int input_geo; int original_prim; vector points[]){

    // 1. GET THE REFERENCE POINT

    // First I will take the first point in the original path as reference
    int points_original_path[] = primpoints(input_geo, original_prim);
    int ref_point = points_original_path[0];
    vector ref_position, temp_position;
    
    //Get the point position and add into the output geometry
    ref_position = point(input_geo, "P", ref_point);
    ref_point = addpoint(0, ref_position);
    
    // 2. GET THE MAGNITUDE BETWEEN POINTS AND REFERENCE POINT
    
    // Create a new array that will store all the points and its magnitudes
    float prim_magnitudes[];
    int prim_points[];
    
    // First, Add the points from the original primitive, but the reference point, 
    // into the array of points to use. Since it could be more than one point, 
    // I will make a loop to iterate for all over the points.
    for (int i = 1; i < len(points_original_path); i++) {
        temp_position = point(input_geo, "P", points_original_path[i]);
        append(prim_magnitudes, length2(temp_position - ref_position));
        // Create current point into the output geometry
        append(prim_points, addpoint(0,temp_position));
    }
    
    // First, Copy the points from the original primitive, skipping the reference point.
    // Into the array of points to use. Since it could be more than one point, 
    // I will make a loop to iterate for all over the points.
    for (int i = 0; i < len(points); i++) {
        temp_position = points[i];
        append(prim_magnitudes, length2(temp_position - ref_position));
        // Create current point into the output geometry
        append(prim_points, addpoint(0,temp_position));
    }

    // 3. SORT THE VALUES BY MAGNITUDE
    
    // Sort the points by the magnitude computed. However I want the indexes
    // sortened not the values itself
    int sorted_indexes[] = argsort(prim_magnitudes);
           
    // 4. CREATE THE PRIMITIVE //
    
    // Create the result primitive with all the points
    int result_prim = addprim(0, "polyline");
    float current_magnitude, previous_magnitude = -1;
    
    // Add the reference point first
    addvertex(0, result_prim, ref_point);
    
    // Add the rest of the values in order of magnitude by using the array with
    // the indexes tu use.
    foreach (int index; sorted_indexes ){
        // Get the ordered magnitude from the array
        current_magnitude = prim_magnitudes[index];
        // Check if the magnitude was the same to the previous to avoid points
        // in the same position
        if (round(current_magnitude,4) != round(previous_magnitude,4) &&
            round(current_magnitude,4) != 0 ) {
            // Add the current vertex
            addvertex(0, result_prim, prim_points[index]);
            // Set the previous magnitude tfor the next iteration
            previous_magnitude = current_magnitude;
          } else {
            // Remove current point previously created.
            removepoint(0,prim_points[index]);
         }
        
    }
    return result_prim;

}
