#define empty {1234,1234,1234}
#define epsilon 0.001

// This function will be run by primitive. This wat for each primitive, I will compute the 
// intersections between the current primitive and the rest of them.

// http://stackoverflow.com/questions/2316490/the-algorithm-to-find-the-point-of-intersection-of-two-3d-line-segment
//
// Find the intersection between two lines
//
// The way that this algorithm works differs from other algoritm or liner equations based
// on several unknown variables. This way use some properties for the dot and cross vectos
// between to lines. The idea is to find the smallest points in which the separation between
// those lines are minumun.
float intersection(vector a; vector b; vector c; vector d; vector point0; vector point1)  { 
    //First condition, both lines doesn't have to be parallel
    if (dot(normalize(b-a), normalize(d-c)) == 1) return -1;
    /// Found p0 and p1 where the lines intersect
    vector r = b - a; // da
    vector s = d - c; // db
    vector q = a - c; // dc
    
    float dotqr = dot(q,r);
    float dotqs = dot(q,s);
    float dotrs = dot(r,s);
    float dotrr = dot(r,r);
    float dotss = dot(s,s);
    
    float denom = dotrr * dotss - dotrs * dotrs;
    float numer = dotqs * dotrs - dotqr * dotss;
    
    float t = numer / denom;
    float u = (dotqs + t * dotrs) / dotss;
  
    if ((t >= 0 && t <= 1) && (u >= 0 && u <= 1)) {
        point0 = a + t * r;
        point1 = c + u *s;
        return abs(length(point1 - point0));
    }
    return -1;
}

// This will check if both points are the same. In order to check
// this a threshold called epsilon is used instead round the values
// so the precision on the float variable is fieed.
int same_point(vector point1; vector point2) {
    if (abs(length(point2 - point1)) < epsilon) return 1;
    return 0;
}

// Following function is used to take additional step to the intersection
// formula. This previosly check both primitives are not parallel, don't
// share any edges and the difference between the points intersection
// onto the both primitives are near to epsilon (0).
//
// Shared points is tricky because the algorithm will detect those points as
// intersection. This is somthing that in this case need to be considered.
int prims_intersect(int input; int nprim1; int nprim2; vector point) {
    // Get first two points from Prim 1
    int points[] = primpoints(input,nprim1);
    vector p1 = point(input,"P",points[0]);
    vector p2 = point(input,"P",points[1]);
    // Get first two points from Prim 2
    int points2[] = primpoints(input,nprim2);
    vector p3 = point(input,"P",points2[0]);
    vector p4 = point(input,"P",points2[1]);
    // check if the points are intersecting bacause same point
    if (same_point(p1,p3) || same_point(p1,p4) || same_point(p2,p3) || same_point(p2,p4))
        return 0;
    // vector points
    vector point1, point2;
    // Compute the intersection
    float dist = intersection(p1,p2,p3,p4, point1, point2);
    if (dist > -1 && dist <= epsilon ) {
        point = point1;
        return 1;
    }
    return 0;
}

// Create the variables
vector intersections_points[];
vector intersection_point;

// Iterate for all the primitives
for (int i=0; i < nprimitives(0);i++) {
        if (i != @primnum) { 
           // Check if intersection
            if (prims_intersect(0, @primnum, i, intersection_point)) {
                append(intersections_points, intersection_point);
            } 
       }
}

// Set the intersections as attrbiute for the primitives
v[]@intersections = intersections_points;




