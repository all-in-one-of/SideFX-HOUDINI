#define empty {1234,1234,1234}
#define epsilon 0.001

// http://stackoverflow.com/questions/2316490/the-algorithm-to-find-the-point-of-intersection-of-two-3d-line-segment
// Find the intersection between two lines
float intersection(vector a; vector b; vector c; vector d; vector point0; vector point1)  {
    //First condition, both lines doesn't have to be parallel
    if (dot(normalize(b-a), normalize(d-c)) == 1) return -1;
    /// Found p0 and p1 where the lines intersect
    vector r = b - a;
    vector s = d - c;
    vector q = c - a;
     // Get the slope for the vectors
    float u = dot(cross(q,s), cross(r,s) / pow(cross(r,s),2));
    float t = dot(cross(q,r), cross(r,s) / pow(cross(r,s),2));
     //check if both s and t are from <0,1> 
    if ((t >= 0 && t <= 1) && (u >= 0 && u <= 1)) {
        // Following points will return a perpendicular vector
        // where distance must be equal to 0
        point0 = a + r * u;
        point1 = c + s * t;
        return length(point1 - point0);
    } 
    // If no intersection found return -1
    return -1;
}

int prims_intersect(int input; int nprim1; int nprim2; vector point) {
    // Get first two points from Prim 1
    int points[] = primpoints(input,nprim1);
    vector p1 = point(input,"P",points[0]);
    vector p2 = point(input,"P",points[1]);
    // Get first two points from Prim 2
    int points2[] = primpoints(input,nprim2);
    vector p3 = point(input,"P",points2[0]);
    vector p4 = point(input,"P",points2[1]);
    // vector points
    vector point1, point2;
    // Compute the intersection
    float dist = intersection(p1,p2,p3,p4, point1, point2);
    if (dist > -1 && dist <= epsilon ) {
        point = point1;
        return 1;
    }
    return 0;
}

vector point;
i@intersetc = prims_intersect(0,0,1,point);
v@point = point;

addpoint(0,point);





