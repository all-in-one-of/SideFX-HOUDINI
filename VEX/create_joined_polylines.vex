#define empty {1234,1234,1234}

// Find the intersection between this primitive with the others
int lines_intersect(vector A; vector B; vector C; vector D; vector point)  {
    vector da = B - A;
    vector db = D - C;
    vector dc = C - A;
     // Get the slope for the vectors
    float s = dot(cross(dc,db), cross(da,db)/pow(cross(da,db),2));
    float k = dot(cross(dc,da), cross(da,db)/pow(cross(da,db),2));
     //check if both s and t are from <0,1> 
    if ((s >= 0 && s <= 1) && (k >= 0 && k <= 1)) {
        point = set(A.x + da.x * s, A.y + da.y * s, A.z + da.z * s);
        return 1;
    } 
    // If no intersection return -1
    return 0;
}

int prims_intersect(int input; int nprim1; int nprim2; vector point) {
    // Get first two points from Prim 1
    int points[] = primpoints(input,nprim1);
    vector p1 = point(input,"P",points[0]);
    vector p2 = point(input,"P",points[1]);
    // Get first two points from Prim 2
    int points2[] = primpoints(input,nprim2);
    vector p3 = point(input,"P",points2[0]);
    vector p4 = point(input,"P",points2[1]);
    // Compute the intersection
    return lines_intersect(p1,p2,p3,p4, point);
}

int create_prim(int input; int nprim; vector p3) {
    //vector empty =  {1234,1234,1234};
    // Get the current vector for the current primitive
    int points[] = primpoints(input,nprim);
    //printf("%d",len(points));
    // This nodes supposes the primitivce it's a single line not a polygon
    vector p1 = point(input,"P",points[0]);
    vector p2 = point(input,"P",points[1]);
    // Check If this primitive it's going to be created into the current geometry
    int new_p1 = addpoint(0,p1);
    int new_p2 = addpoint(0,p2);
    //Create new Poly line
    int new_prim = addprim(0, "polyline");
    // Check if there is a point in the middle.
    // This is to assure clock-wise addition to the poly
    if (p3 == empty) {
        // Add the primis normally
        addvertex(0, new_prim, new_p1);
        addvertex(0, new_prim, new_p2);
     } else   { 
        // Create another new prim
        int new_prim2 = addprim(0, "polyline");
        int new_p3 = addpoint(0,p3);
         
        //Check the order for the primitives
        if ((length(p1-p2)) > (length(p1-p3))){
            // Add the prim 1
            addvertex(0, new_prim, new_p1);
            addvertex(0, new_prim, new_p3);
             // Add the prim 2
            addvertex(0, new_prim2, new_p3);
            addvertex(0, new_prim2, new_p2);
        }
        else {
            // Add the prim 1
            addvertex(0, new_prim, new_p1);
            addvertex(0, new_prim, new_p2);
            // Add the prim 2
            addvertex(0, new_prim2, new_p2);            
            addvertex(0, new_prim2, new_p3);
        }
            
    }
    return new_prim;
}

// Set the current input for the geometry
int input = 1;
// Create the variables
vector intersection_point;

// Iterate for all the primitives
for (int i=0; i < nprimitives(input);i++) {
    for (int j=0; j < nprimitives(input);j++) {     
        if (i != j) {
            // Check if intersection
            if (prims_intersect(input, i, j, intersection_point)) {
               // Create the geometry with the intersection point
                create_prim( input, i, intersection_point);
            } else {
                // Create the geometry without the intersection point
                create_prim( input, i, empty);
            }
        }
 
    }
    
}
